import FIX_4_4

scenario NewOrderFill {
	name "NewOrderFill"
	description "Initialise Book State, send NewOrderSingle Message then receive a fill action"
	events[bookState, NewOrderSingle, fill]
}

internal state {
    assignable{
        Side:Side
        Price:?Price
        OrderQtyData.OrderQty : Qty
        OrdStatus:OrdStatus = OrdStatus.New;
        OrdType:OrdType
        LeavesQty:Qty 
        CumQty:Qty 
        SpreadProportion:?float
    }
    live_order : bool = false;
    AvgPx : float 
    bestBid: Price 
    bestAsk: Price 
}

extend enum OrdType {
    StopSpread "s"
}

extend message NewOrderSingle {
    SpreadProportion "sp" :? float
}

message NewOrderSingle {
    req ClOrdID
    req Side
    req TransactTime
    req OrdType valid when it in [ OrdType.Limit, OrdType.Market, StopSpread ]
    req OrderQtyData.OrderQty
    opt SpreadProportion valid when case(it){None:true}{Some x: x>0.0 &&  x<=1.0}
    opt Price 
    ign Account
    opt ExecInst default = Some ExecInst.Held
    validate {
         this.OrdType == OrdType.Market <==> !present(this.Price) &&
         this.OrdType == OrdType.Limit ==> present(this.Price) &&
         this.OrdType == OrdType.StopSpread ==> present(this.Price)
    }

    validate {
        this.OrdType == StopSpread <==>
            present(this.SpreadProportion)
    }

    validate {
         this.OrdType != OrdType.Market ==>
                (case this.Price
                    {Some price: price > 0.0}
                    {None: false}
                 )
    }

}

outbound message ExecutionReport {
    req OrderID
    req ExecID
    req ExecType
    req OrdStatus
    req Side
    req OrderQtyData.OrderQty
    req LeavesQty
    req CumQty
    opt Text
}

action fill {
    fill_price : Price
    fill_qty : Qty

    validate {state.OrdStatus != OrdStatus.PendingNew}
    validate { this.fill_qty > 0.0 }
    validate { this.fill_qty <= state.LeavesQty}
    validate { this.fill_price > 0.0 }
    validate {
        (state.OrdType != OrdType.Market) ==>
        ( case state.Price
              { Some p:
                    if ( state.Side == Side.Buy ) then
                        ( this.fill_price <= p )
                    else ( this.fill_price >= p )
              }
              { None: true }
        )
    }
}

action bookState {
    bestBid : Price
    bestAsk : Price
    
    validate{
        this.bestAsk > this.bestBid &&
        this.bestBid > 0.0 &&
        this.bestAsk > 0.0
        }
}

receive (f:fill) {
    state.LeavesQty = state.LeavesQty - f.fill_qty
    state.AvgPx = ( state.AvgPx * state.CumQty + f.fill_qty * f.fill_price ) / ( f.fill_qty + state.CumQty )
    state.CumQty = state.CumQty + f.fill_qty

    if state.LeavesQty == 0.0 then
        state.OrdStatus = OrdStatus.Filled
    else
        state.OrdStatus = OrdStatus.PartiallyFilled

    send ExecutionReport { state with
        OrderID = "";
        ExecID = "";
        ExecType = ExecType.New;
    }
}

receive (ba:bookState){
    state.bestBid = ba.bestBid
    state.bestAsk = ba.bestAsk

    let spread = (state.bestAsk - state.bestBid)/state.bestAsk
    if 
    (case(state.SpreadProportion){None:false}{Some x: x >= spread}) &&
        state.OrdStatus == OrdStatus.PendingNew
        then state.OrdStatus = OrdStatus.New
}

receive (msg:NewOrderSingle) {
    state.live_order = true
    state.LeavesQty = msg.OrderQtyData.OrderQty
    assignFrom(msg,state)

    if msg.OrdType == StopSpread
    then case(msg.SpreadProportion){Some x:
        if state.bestAsk != 0.0 then
        if x >= (state.bestAsk - state.bestBid)/state.bestAsk
            then state.OrdStatus = OrdStatus.New 
            else state.OrdStatus = OrdStatus.PendingNew
        else state.OrdStatus = OrdStatus.PendingNew
    }

     send ExecutionReport {state with 
        OrderID = msg.ClOrdID;
        ExecID = "";
        ExecType = ExecType.New;
    }
}

reject (msg:NewOrderSingle, text:string){
    missingfield:{
        send ExecutionReport {state with
            OrderID = "";
            ExecID = "";
            ExecType = ExecType.New;
            Text = Some text;
        }
    }
    invalidfield:{
         send ExecutionReport {state with
            OrderID = msg.ClOrdID;
            ExecID = "";
            ExecType = ExecType.New;
            Text = Some text;
        }
    }
    invalid:{
    }
}
